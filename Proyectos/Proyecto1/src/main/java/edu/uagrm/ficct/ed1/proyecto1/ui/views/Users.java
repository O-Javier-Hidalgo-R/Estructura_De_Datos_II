package edu.uagrm.ficct.ed1.proyecto1.ui.views;

import bo.uagrm.ficct.ed2.arbolbusqueda.ClaveNoEncontrada;
import bo.uagrm.ficct.ed2.arbolbusqueda.IArbolBusqueda;
import bo.uagrm.ficct.ed2.arbolbusqueda.binario.ArbolAVL;
import edu.uagrm.ficct.ed1.proyecto1.app.models.MBook;
import edu.uagrm.ficct.ed1.proyecto1.app.models.User;
import edu.uagrm.ficct.ed1.proyecto1.ui.forms.FormMain;
import edu.uagrm.ficct.ed1.proyecto1.utils.Serializer;
import edu.uagrm.ficct.ed1.proyecto1.utils.graphicUtils;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 * Vista para la visualizacion de catalogos de libros.
 *
 * @author OJavierHR
 */
public class Users extends javax.swing.JPanel {

    /**
     * Arbol de busqueda en el que se almacenan los libros.
     */
    private static final IArbolBusqueda<Long, User> aBUsers
            = new ArbolAVL<>();
    /**
     * Variable para guardar la referencia al modelo usado en las filas del
     * jtable donde se muestran los libros.
     */
    private static DefaultTableModel model;

    /**
     * Constructor por defecto.
     */
    public Users() {
        initComponents();
        model = (DefaultTableModel) userTable.getModel();
        InitStyles();
        LoadBooks();
    }

    /**
     * Funcion en el que se inicia los estilos de componentes del UI. Son
     * recomendaciones de implementacion para el uso de la libreria flatlaf
     */
    private void InitStyles() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        userLabel = new javax.swing.JLabel();
        textInputBox = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        newButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(584, 383));

        bg.setPreferredSize(new java.awt.Dimension(584, 383));

        userLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        userLabel.setText("Usuarios");

        textInputBox.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        textInputBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textInputBoxKeyReleased(evt);
            }
        });

        searchButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        searchButton.setText("Buscar");
        searchButton.setBorderPainted(false);
        searchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        searchButton.setPreferredSize(new java.awt.Dimension(82, 23));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        userTable.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Apellido P.", "Apellido M.", "Domicilio", "Tel√©fono"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(userTable);

        newButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        newButton.setText("Nuevo");
        newButton.setBorderPainted(false);
        newButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        newButton.setPreferredSize(new java.awt.Dimension(170, 23));
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        editButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        editButton.setText("Editar");
        editButton.setBorderPainted(false);
        editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        editButton.setPreferredSize(new java.awt.Dimension(170, 23));
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        deleteButton.setText("Borrar");
        deleteButton.setBorderPainted(false);
        deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        deleteButton.setPreferredSize(new java.awt.Dimension(170, 23));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(newButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(36, 36, 36)
                        .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(26, 26, 26)
                        .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addComponent(userLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(textInputBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textInputBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(newButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento al presionar el boton "Buscar".
     *
     * @param evt
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        Long userKey = Long.valueOf(textInputBox.getText());
        graphicUtils.tableClear(model);
        addUserInTable(userKey, aBUsers.buscar(userKey));
    }//GEN-LAST:event_searchButtonActionPerformed
    /**
     * Evento al dejar de presionar una tecla mientras esta seleccionado el
     * JTextFiel usado para ingresar texto.
     *
     * @param evt
     */
    private void textInputBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textInputBoxKeyReleased
        // TODO add your handling code here:
        if (textInputBox.getText().equals("")) {
            showAllUsers();
            graphicUtils.instructionText(textInputBox,
                    "Ingrese el CI del usuario a buscar.");
        }
    }//GEN-LAST:event_textInputBoxKeyReleased

   /**
     * Evento al presionar el boton de nuevo.
     *
     * @param evt
     */
    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        // TODO add your handling code here:        
        FormMain.showJPanel(new UpUser());
    }//GEN-LAST:event_newButtonActionPerformed
    /**
     * Evento al presionar el boton de editar.
     *
     * @param evt
     */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:        
        if(userTable.getSelectedRow() >= 0){
            FormMain.showJPanel(new UpUser(aBUsers, 
                    (Long) model.getValueAt(userTable.getSelectedRow(), 
                            0)));
        }
    }//GEN-LAST:event_editButtonActionPerformed
    /**
     * Evento al presionar el boton "eliminar".
     * @param evt 
     */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        if(userTable.getSelectedRow() >= 0){
            try {
                aBUsers.eliminar((Long) model.getValueAt(userTable.getSelectedRow(), 0));
            } catch (ClaveNoEncontrada ex) {
                Logger.getLogger(Users.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        savedUser();
        showAllUsers();
    }//GEN-LAST:event_deleteButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField textInputBox;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
    /**
     * Procedimiento que "carga" los libros al arbol de busqueda desde un lugar
     * de almacenamiento.
     */
    private void LoadBooks() {
        //carga los libros desde "datos externos"
        Serializer.deserializeSearchTree(aBUsers, Serializer.DEFAULT_ROOT + "books");
        showAllUsers();
    }

    /**
     * Operacion que muestra todos los usuarios almacenados.
     */
    public static void showAllUsers() {
    }

    /**
     * Operacion que agrega un libro en la tabla.
     *
     * @param bookKey
     * @param user
     */
    private static void addUserInTable(Long bookKey, User user) {
        model.addRow(new Object[]{
            bookKey,
            user.getId(),
            user.getName(),
            user.getLast_name_p(),
            user.getLast_name_m(),
            user.getDomicilio(),
            user.getTel()
        });
    }

    public static void savedUser() {
        Serializer.serializeSearchTree(aBUsers, Serializer.DEFAULT_ROOT + "books");
    }
}
