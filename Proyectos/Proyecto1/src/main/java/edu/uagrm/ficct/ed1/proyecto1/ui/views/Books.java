package edu.uagrm.ficct.ed1.proyecto1.ui.views;

import bo.uagrm.ficct.ed2.arbolbusqueda.ClaveNoEncontrada;
import bo.uagrm.ficct.ed2.arbolbusqueda.IArbolBusqueda;
import bo.uagrm.ficct.ed2.arbolbusqueda.binario.ArbolAVL;
import edu.uagrm.ficct.ed1.proyecto1.app.models.MBook;
import edu.uagrm.ficct.ed1.proyecto1.ui.forms.FormMain;
import edu.uagrm.ficct.ed1.proyecto1.utils.Serializer;
import edu.uagrm.ficct.ed1.proyecto1.utils.graphicUtils;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 * Vista para la visualizacion de catalogos de libros.
 *
 * @author OJavierHR
 */
public class Books extends javax.swing.JPanel {

    /**
     * Arbol de busqueda en el que se almacenan los libros.
     */
    private static final IArbolBusqueda<Long, MBook> aBBooks
            = new ArbolAVL<>();
    /**
     * Variable para guardar la referencia al modelo usado en las filas del
     * jtable donde se muestran los libros.
     */
    private static DefaultTableModel model;

    /**
     * Constructor por defecto.
     */
    public Books() {
        initComponents();
        model = (DefaultTableModel) BooksTable.getModel();
        //InitStyles();
        LoadBooks();
    }

    /**
     * Funcion en el que se inicia los estilos de componentes del UI. Son
     * recomendaciones de implementacion para el uso de la libreria flatlaf
     */
    private void InitStyles() {
        /*Coloca al componente de tipo textBox un texto de "instruccion" en 
        caso de estar vacio*/
        textInputBox.putClientProperty("JTextField.placeholderText",
                "Ingrese el ID del libro a buscar.");
        graphicUtils.setStyle(titleLabel, "h2", null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        textInputBox = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        BooksTable = new javax.swing.JTable();
        refreshButton = new javax.swing.JButton();
        idCheckCircle = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        titleCheckCircle = new javax.swing.JRadioButton();
        authorCheckCircle = new javax.swing.JRadioButton();
        categoryCheckCircle = new javax.swing.JRadioButton();
        categoryCheckCircle1 = new javax.swing.JRadioButton();
        categoryCheckCircle2 = new javax.swing.JRadioButton();
        categoryCheckCircle3 = new javax.swing.JRadioButton();
        newButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(584, 383));

        bg.setPreferredSize(new java.awt.Dimension(584, 383));

        titleLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        titleLabel.setText("Libros");

        textInputBox.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        textInputBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textInputBoxActionPerformed(evt);
            }
        });
        textInputBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textInputBoxKeyReleased(evt);
            }
        });

        searchButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        searchButton.setText("Buscar");
        searchButton.setBorderPainted(false);
        searchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        searchButton.setPreferredSize(new java.awt.Dimension(82, 23));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        BooksTable.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        BooksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Título", "Autor", "Descripción", "Categoría", "Páginas", "Idioma", "Editorial", "Fecha de Publicacion", "Stock", "Disponibles"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Short.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Byte.class, java.lang.Byte.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        BooksTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(BooksTable);

        refreshButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        refreshButton.setText("Actualizar");
        refreshButton.setBorderPainted(false);
        refreshButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        idCheckCircle.setSelected(true);
        idCheckCircle.setText("ID");

        jLabel1.setText("Buscar por:");

        titleCheckCircle.setText("Título");
        titleCheckCircle.setEnabled(false);

        authorCheckCircle.setText("Autor");
        authorCheckCircle.setEnabled(false);

        categoryCheckCircle.setText("Categoria");
        categoryCheckCircle.setEnabled(false);

        categoryCheckCircle1.setText("Editorial");
        categoryCheckCircle1.setEnabled(false);

        categoryCheckCircle2.setText("Idioma");
        categoryCheckCircle2.setEnabled(false);

        categoryCheckCircle3.setText("Disponible");
        categoryCheckCircle3.setEnabled(false);
        categoryCheckCircle3.setPreferredSize(new java.awt.Dimension(80, 21));

        newButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        newButton.setText("Nuevo");
        newButton.setBorderPainted(false);
        newButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        newButton.setPreferredSize(new java.awt.Dimension(170, 23));
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        editButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        editButton.setText("Editar");
        editButton.setBorderPainted(false);
        editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        editButton.setPreferredSize(new java.awt.Dimension(170, 23));
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        deleteButton.setText("Borrar");
        deleteButton.setBorderPainted(false);
        deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        deleteButton.setPreferredSize(new java.awt.Dimension(170, 23));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(idCheckCircle)
                        .addGap(3, 3, 3)
                        .addComponent(titleCheckCircle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(authorCheckCircle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoryCheckCircle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoryCheckCircle1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoryCheckCircle2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoryCheckCircle3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(newButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(33, 33, 33)
                                .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(29, 29, 29)
                                .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(textInputBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(refreshButton)))
                        .addContainerGap())))
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(refreshButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textInputBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(idCheckCircle)
                    .addComponent(titleCheckCircle)
                    .addComponent(authorCheckCircle)
                    .addComponent(categoryCheckCircle)
                    .addComponent(categoryCheckCircle1)
                    .addComponent(categoryCheckCircle2)
                    .addComponent(categoryCheckCircle3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento al presionar el boton "Buscar".
     *
     * @param evt
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        Long bookKey = Long.valueOf(textInputBox.getText());
        graphicUtils.tableClear(model);
        addBookInTable(bookKey, aBBooks.buscar(bookKey));
    }//GEN-LAST:event_searchButtonActionPerformed
    /**
     * Evento al dejar de presionar una tecla mientras esta seleccionado el
     * JTextFiel usado para ingresar texto.
     *
     * @param evt
     */
    private void textInputBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textInputBoxKeyReleased
        // TODO add your handling code here:
        if (textInputBox.getText().equals("")) {
            showAllBooks();
            graphicUtils.instructionText(textInputBox,
                    "Ingrese el ID del libro a buscar.");
        }
    }//GEN-LAST:event_textInputBoxKeyReleased
    /**
     * Evento al presionar el boton de actualizar.
     *
     * @param evt
     */
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        showAllBooks();
    }//GEN-LAST:event_refreshButtonActionPerformed
    /**
     * Evento al presionar el boton de nuevo.
     *
     * @param evt
     */
    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        // TODO add your handling code here:        
        FormMain.showJPanel(new UpBook(aBBooks,Long.valueOf(UpBook.NEW_KEY)));
    }//GEN-LAST:event_newButtonActionPerformed
    /**
     * Evento al presionar el boton de editar.
     *
     * @param evt
     */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:        
        if(BooksTable.getSelectedRow() >= 0){
            FormMain.showJPanel(new UpBook(aBBooks, 
                    (Long) model.getValueAt(BooksTable.getSelectedRow(), 
                            0)));
        }
    }//GEN-LAST:event_editButtonActionPerformed
    /**
     * Evento al presionar el boton "eliminar".
     * @param evt 
     */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        if(BooksTable.getSelectedRow() >= 0){
            try {
                aBBooks.eliminar((Long) model.getValueAt(BooksTable.getSelectedRow(), 0));
            } catch (ClaveNoEncontrada ex) {
                Logger.getLogger(Books.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        savedBooks();
        showAllBooks();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void textInputBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textInputBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textInputBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable BooksTable;
    private javax.swing.JRadioButton authorCheckCircle;
    private javax.swing.JPanel bg;
    private javax.swing.JRadioButton categoryCheckCircle;
    private javax.swing.JRadioButton categoryCheckCircle1;
    private javax.swing.JRadioButton categoryCheckCircle2;
    private javax.swing.JRadioButton categoryCheckCircle3;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JRadioButton idCheckCircle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField textInputBox;
    private javax.swing.JRadioButton titleCheckCircle;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
    /**
     * Procedimiento que "carga" los libros al arbol de busqueda desde un lugar
     * de almacenamiento.
     */
    private void LoadBooks() {
        //carga los libros desde "datos externos"
        Serializer.deserializeSearchTree(aBBooks, Serializer.DEFAULT_ROOT + "books");
        showAllBooks();
    }

    /**
     * Operacion que muestra todos los libros almacenados.
     */
    public static void showAllBooks() {
        List<Long> lisClaves = aBBooks.recorridoInOrden();
        graphicUtils.TableBooksClear(model);
        for (int i = 0; i < lisClaves.size(); i++) {
            addBookInTable(lisClaves.get(i),
                    aBBooks.buscar(lisClaves.get(i)));
        }
    }

    /**
     * Operacion que agrega un libro en la tabla.
     *
     * @param bookKey
     * @param book
     */
    private static void addBookInTable(Long bookKey, MBook book) {
        model.addRow(new Object[]{
            bookKey,
            book.getTitle(),
            book.getAuthor(),
            book.getDescription(),
            book.getCategoriesList().toString(),
            book.getPages(),
            book.getLanguage(),
            book.getPublisher(),
            book.getDate(),
            book.getStock(),
            book.getAvailable()
        });
    }

    public static void savedBooks() {
        Serializer.serializeSearchTree(aBBooks, Serializer.DEFAULT_ROOT + "books");
    }
}
